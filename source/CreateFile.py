#$(Exec) -help #(help)
#$(Exec) -h header.h -c source.c -o outpath -a "author name" -e  "email"
HeaderTemplate = "/**\n\
 * @file [FILE_NAME]\n\
 * @author [AUTHOR_NAME] [(EMAIL)]\n\
 * @brief \n\
 * @details HeaderTemplate Generated By Python File Generator\n\
 * @version 0.3\n\
 * @date [DATE]\n\
 * \n\
 * @copyright Copyright (c) [YEAR]\n\
 * \n\
 */\n\
\n\
/*======================================================================================================*/\n\
/*                                       Header Guard                                                   */\n\
/*======================================================================================================*/\n\
#ifdef __cplusplus\n\
extern \"C\"{\n\
#endif\n\
#ifndef [HEADER_GUARD]\n\
#define [HEADER_GUARD]\n\n\
/*======================================================================================================*/\n\
/*                                          File Include                                                */\n\
/*======================================================================================================*/\n\
\n\
/*======================================================================================================*/\n\
/*                                          Global Macros                                               */\n\
/*======================================================================================================*/\n\
\n\
/*======================================================================================================*/\n\
/*                                          Global Typedefs                                             */\n\
/*======================================================================================================*/\n\
\n\
/*======================================================================================================*/\n\
/*                                          Config Macros                                               */\n\
/*======================================================================================================*/\n\
\n\
/*======================================================================================================*/\n\
/*                                          Global Constants                                            */\n\
/*======================================================================================================*/\n\
\n\
/*======================================================================================================*/\n\
/*                                          Global Variables                                            */\n\
/*======================================================================================================*/\n\
\n\
/*======================================================================================================*/\n\
/*                                      Functions Declaration                                           */\n\
/*======================================================================================================*/\n\
\n\
#endif\n\
#ifdef __cplusplus\n\
}\n\
#endif\n\n\
"

SourceTemplate = "/**\n\
 * @file [FILE_NAME]\n\
 * @author [AUTHOR_NAME] [(EMAIL)]\n\
 * @brief \n\
 * @details Source Template Generated By Python File Generator\n\
 * @version 0.3\n\
 * @date [DATE]\n\
 * \n\
 * @copyright Copyright (c) [YEAR]\n\
 * \n\
 */\n\
\n\
/*======================================================================================================*/\n\
/*                                          Header Includes                                             */\n\
/*======================================================================================================*/\n\
\n\
/*======================================================================================================*/\n\
/*                                          Local Macros                                                */\n\
/*======================================================================================================*/\n\
\n\
/*======================================================================================================*/\n\
/*                                          Local Typedefs                                              */\n\
/*======================================================================================================*/\n\
\n\
/*======================================================================================================*/\n\
/*                                          Local Constants                                             */\n\
/*======================================================================================================*/\n\
\n\
/*======================================================================================================*/\n\
/*                                          Local Variables                                             */\n\
/*======================================================================================================*/\n\
\n\
/*======================================================================================================*/\n\
/*                                          Local Functions                                             */\n\
/*======================================================================================================*/\n\
\n\
/*======================================================================================================*/\n\
/*                                          Functions Implementation                                    */\n\
/*======================================================================================================*/\n\
\n\
\n\
"
TempSource = ''
TempHeader = ''

import datetime
from email.header import Header 
import sys

SupportedCommands = 'iIoOcChHeEaA'
ToolInfo = 'This is a Python Generator for headers and sources for c language with doxygen template\n\
Author      :   Mohamed Eleish\n\
Title       :   Junior Embeded Software Engineer at Valeo V-Core Central\n\
Version     :   V1.1\n\
Contact     :   mohammedeshikh@yahoo.com\n\
How to use  :\n\
    -i/-I   :   For more info\n\
    -h/-H   :   Specifies the header file Name (ie: header.h)\n\
    -c/-C   :   Specifies the source file Name (ie: source.c)\n\
    -a/-A   :   specifies the author Name (ie: "author name")\n\
    -e/-E   :   specifies the author email (ie: authoremail@domain.com)\n\
    -o/-O   :   specifies the output path (ie: Dir/subDir)\n\
'

def PrepareHeader(Args, HeaderName):
    global TempHeader 
    global Date 
    global Year 
    Date = str(datetime.date.today())
    Year = str(datetime.datetime.now().year)
    HeaderGuard = HeaderName.split('.')[0].upper() + '_H_INCLUDED'
    TempHeader = HeaderTemplate.replace('[FILE_NAME]',HeaderName)
    TempHeader = TempHeader.replace('[AUTHOR_NAME]',Args['author'])
    TempHeader = TempHeader.replace('[(EMAIL)]','('+Args['email']+')')
    TempHeader = TempHeader.replace('[DATE]',Date)
    TempHeader = TempHeader.replace('[YEAR]',Year)
    TempHeader = TempHeader.replace('[HEADER_GUARD]',HeaderGuard)
    
    



def PrepareSource(Args, SourceName):

    global TempSource
    global Date 
    global Year
    
    Date = str(datetime.date.today())
    Year = str(datetime.datetime.now().year)
    TempSource = SourceTemplate.replace('[FILE_NAME]',SourceName)
    TempSource = TempSource.replace('[AUTHOR_NAME]',Args['author'])
    TempSource = TempSource.replace('[(EMAIL)]','('+Args['email']+')')
    TempSource = TempSource.replace('[DATE]',Date)
    TempSource = TempSource.replace('[YEAR]',Year)     


    
    

def ConstructInputs(Inputs):
    Args = {'headers':[], 'sources':[],'OutDir':'','author':'','email':''}
    Idx = 0
    for Input in Inputs:
        if(Input.upper() == '-H'):
            #insert into headers
            headers = Args.pop('headers')
            headers.append(Inputs[Idx+1])
            Args.update({'headers':headers})
        elif (Input.upper() == '-C'):
            #insert into sources
            sources = Args.pop('sources')
            sources.append(Inputs[Idx+1])
            Args.update({'sources':sources})
        elif (Input.upper() == '-O'):
            OutDir = Args.pop('OutDir')
            OutDir = Inputs[Idx+1]
            Args.update({'OutDir':OutDir})
        elif (Input.upper() == '-A'):
            author = Args.pop('author')
            author = Inputs[Idx+1]
            Args.update({'author':author})
        elif (Input.upper() == '-E'):
            email = Args.pop('email')
            email = Inputs[Idx+1]
            Args.update({'email':email})
        Idx += 1
    return Args

def ValidateParam(Inputs):
    Valid = True
    for Input in Inputs:
        if (Input[0] == '-'):
            if (len(Input[1:]) != 1 or Input[1] not in SupportedCommands): 
                Valid = False
                break
    return Valid

def ValidateString(Inputs):
    Valid = True
    for Input in Inputs:
        try:
            int(Input)
            Valid = False
            break
        except:
            continue
    return Valid


def ValidateInfo(Inputs):
    InfoCounter = 0
    OtherFlag = False
    Valid = True
    for Input in Inputs:
        if Input.upper() == '-I':
            InfoCounter += 1
        elif Input[0] == '-' and OtherFlag == False:
            OtherFlag = True
    if ((InfoCounter == 1 and OtherFlag == True) or InfoCounter > 1):
        Valid = False
    return Valid

def ValidateHeaderSource(Inputs, Type):
    Valid = True
    Idx = 0
    L = len(Inputs)
    for Input in Inputs:
        if Input.upper() == '-'+Type.upper():
            if Idx+1 < L:
                if Inputs[Idx+1][-1] != Type:
                    Valid = False
                    break
                elif Idx+2 < L:
                    if Inputs[Idx+2][0] != '-':
                        Valid = False
                        break
        Idx += 1
    return Valid

def ValidateOutput(Inputs):
    Indecies = []
    Idx = 0
    Valid = False
    for Input in Inputs:
        if Input.upper() == '-O':
            Indecies.append(Idx)
        Idx += 1
    if (len(Indecies) == 1):
        if(Indecies[0]+1 < len(Inputs)):
            OutDir = Inputs[Indecies[0]+1]
            if(OutDir[0] != '-' and (OutDir.find('.') == -1 or OutDir.find('./') != -1)):
                Valid = True
    return Valid

def ValidateAuthor(Inputs):
    Valid = False
    Idx = 0
    Indecies = []
    Author = ''
    for Input in Inputs:
        if Input.upper() == '-A':
            Indecies.append(Idx)
        Idx += 1
    if (len(Indecies) == 1):
        if(Indecies[0] + 1 < len(Inputs)):
            Author = Inputs[Indecies[0] + 1]
    if(Author != ''):
        if (Author[0] != '-'):
            Valid = True
    return Valid

def ValidateEmail(Inputs):
    Valid = False
    Idx = 0
    Indecies = []
    email = ''
    for Input in Inputs:
        if Input.upper() == '-E':
            Indecies.append(Idx)
        Idx += 1
    if(len(Indecies) == 1):
        if(Indecies[0] + 1 < len(Inputs)):
            email = Inputs[Indecies[0]+1]
    if(email != ''):
        if((email[0] != '-') and (email.find('@') != -1) and (email.find('.') != -1)):
            Valid = True
    return Valid

def ValidateInputs(Inputs):
    ParamFlag = ValidateParam(inputs)
    StringFlag = ValidateString(Inputs)
    InfoFlag = ValidateInfo(Inputs)
    HeaderFlag = ValidateHeaderSource(Inputs,'h')
    SourceFlag = ValidateHeaderSource(Inputs,'c')
    OutputFlag = ValidateOutput(Inputs)
    AuthorFlag = ValidateAuthor(Inputs)
    EmailFlag = ValidateEmail(Inputs)
    
    '''
    print("parameter flag = ",ParamFlag)
    print("string flag = ",StringFlag)
    print("Info flag = ",InfoFlag)
    print("header flag = ",HeaderFlag)
    print("source flag = ",SourceFlag)
    print("output flag = ",OutputFlag)
    print("author flag = ",AuthorFlag)
    print("email flag = ",EmailFlag)
    '''
    Valid = False
    if(ParamFlag  and StringFlag and HeaderFlag and SourceFlag and OutputFlag and AuthorFlag and EmailFlag and InfoFlag):
        Valid = True
    elif(InfoFlag == True and OutputFlag == False and AuthorFlag == False and EmailFlag == False):
        Valid = True
    #print("Valid ", Valid)
    return Valid 


def PrintInfo():
    print(ToolInfo)

def GenerateSource(FileName, OutDir):
    #print("From Generate Source Function")
    #print("File Name: ",FileName)
    #print("Output Directory: ",OutDir)
    OutFile = OutDir + '/' + FileName
    try:
        FHandle = open(OutFile,'w')
        FHandle.write(TempSource)
        FHandle.close()
    except:
        print("Path",OutDir,"Dosen't Exist !")


def GenerateHeader(FileName, OutDir):
    #print("From Generate Header Function")
    #print("File Name: ",FileName)
    #print("Output Directory: ",OutDir)
    OutFile = OutDir + '/' + FileName


    try:
        FHandle = open(OutFile,'w')
        FHandle.write(TempHeader)
        FHandle.close()
    except:
        print("Path",OutDir,"Dosen't Exist !")

def UnknownInput():
    print("From Unknown Inputs Function")


def ListFind(List, obj):
    Indecies = []
    Idx = 0
    for item in List:
        if (item.upper() == obj):
            Indecies.append(Idx)
        Idx += 1
    return Indecies


inputs = sys.argv

if (ValidateInputs(inputs) == True):
    #search for Info paramater
    InfoIdx = ListFind(inputs,'-I')
    OutDir = ListFind(inputs,'-O')
    if(InfoIdx != [] ):
        PrintInfo()
    elif (len(OutDir) > 1):
        print("Multiple Output Directories!!")
        print("Run with -I for more info")
    elif (len(OutDir) == 0):
        print("No Output Directories!!")
        print("Run with -I for more info")
    else:
        Args = ConstructInputs(inputs)
        OutDir = Args['OutDir']
        headers = Args['headers']
        sources = Args['sources']
        author = Args['author']
        email = Args['email']
        if(headers == [] and sources == []):
            print("No Input files supplied!!")
            print('Run with -I for more')
        else:
            #HeaderTemplate = HeaderTemplate.replace('[AUTHOR_NAME]',author)
            #HeaderTemplate = HeaderTemplate.replace('[EMAIL]',email)
            for header in headers:
                PrepareHeader(Args,header)
                GenerateHeader(header,OutDir)
            for source in sources:
                PrepareSource(Args,source)
                GenerateSource(source,OutDir)
                
else:
    print('Input Error\nRun with -I for more info')
